/* -*- Mode: c++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 40 -*- */
/* vim: set ts=2 et sw=2 tw=80: */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsIDOMEventTarget.idl"

/**
 * MusicMetadata, MusicPlayStatus, and MusicNotification are used to keep music
 * medadata from Applications. Please see specification of AVRCP 1.3 for more
 * details.
 *
 * @title:           track title
 * @artist:          artist name
 * @album:           album name
 * @mediaNumber:     track number
 * @totalMediaCount: number of tracks in the album
 * @playingTime:     playing time
 */
dictionary MusicMetaData
{
  DOMString  title;
  DOMString  artist;
  DOMString  album;
  unsigned long  mediaNumber;
  unsigned long  totalMediaCount;
  unsigned long  playingTime;
};

/**
 * @duration:   current track length
 * @position:   playing time
 * @playStatus: play status
 */
dictionary MusicPlayStatus
{
  unsigned long  duration;
  unsigned long  position;
  unsigned long  playStatus;
};

/**
 * @eventId: 
 * @data:   
 */
dictionary MusicNotification
{
  unsigned short  eventId;
  unsigned long long  data;
};

interface nsIDOMDOMRequest;
interface nsIDOMBlob;
interface nsIDOMBluetoothDevice;

[scriptable, builtinclass, uuid(fbaa8f37-18c5-4ffd-b61f-12b94b11606e)]
interface nsIDOMBluetoothAdapter : nsIDOMEventTarget
{
  readonly attribute DOMString address;
  [binaryname(AdapterClass)] readonly attribute unsigned long class;
  readonly attribute bool discovering;

  [implicit_jscontext]
  readonly attribute jsval devices;

  [implicit_jscontext]
  readonly attribute jsval uuids;
  
  readonly attribute DOMString name;
  readonly attribute bool discoverable;
  // Unit: sec
  readonly attribute unsigned long discoverableTimeout;

  nsIDOMDOMRequest setName(in DOMString name);
  nsIDOMDOMRequest setDiscoverable(in bool discoverable);
  nsIDOMDOMRequest setDiscoverableTimeout(in unsigned long timeout);
  nsIDOMDOMRequest startDiscovery();
  nsIDOMDOMRequest stopDiscovery();
  nsIDOMDOMRequest pair(in nsIDOMBluetoothDevice aDevice);
  nsIDOMDOMRequest unpair(in nsIDOMBluetoothDevice aDevice);
  nsIDOMDOMRequest getPairedDevices();
  nsIDOMDOMRequest getConnectedDevices(in unsigned short aProfile);
  nsIDOMDOMRequest setPinCode(in DOMString aDeviceAddress, in DOMString aPinCode);
  nsIDOMDOMRequest setPasskey(in DOMString aDeviceAddress, in unsigned long aPasskey);
  nsIDOMDOMRequest setPairingConfirmation(in DOMString aDeviceAddress, in bool aConfirmation);
  nsIDOMDOMRequest setAuthorization(in DOMString aDeviceAddress, in bool aAllow);

  /** 
   * Connect/Disconnect to a specific service of a target remote device. 
   * To check the value of service UUIDs, please check "Bluetooth Assigned 
   * Numbers" / "Service Discovery Protocol" for more information.
   *  
   * @param aDeviceAddress Remote device address
   * @param aProfile 2-octets service UUID
   */
  nsIDOMDOMRequest connect(in DOMString aDeviceAddress, in unsigned short aProfile);
  nsIDOMDOMRequest disconnect(in unsigned short aProfile);

  // One device can only send one file at a time
  nsIDOMDOMRequest sendFile(in DOMString aDeviceAddress, in nsIDOMBlob aBlob);
  nsIDOMDOMRequest stopSendingFile(in DOMString aDeviceAddress);
  nsIDOMDOMRequest confirmReceivingFile(in DOMString aDeviceAddress, in bool aConfirmation);

  // AVRCP 1.3 methods
  nsIDOMDOMRequest sendMusicMetaData(in jsval aOptions);
  nsIDOMDOMRequest sendMusicPlayStatus(in jsval aOptions);
  nsIDOMDOMRequest sendMusicNotification(in jsval aOptions);

  // Connect/Disconnect SCO (audio) connection
  nsIDOMDOMRequest connectSco();
  nsIDOMDOMRequest disconnectSco();
  nsIDOMDOMRequest isScoConnected();

  // Fired when discoverying and any device is discovered.
  [implicit_jscontext] attribute jsval ondevicefound;
};
